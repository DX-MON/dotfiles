#compdef dragonBoot dragonBoot.py
# SPDX-License-Identifier: BSD-3-Clause

# Copyright (c) 2022 Rachel Mant
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

_dragonBoot_build() {
	local arguments targets
	local usage=`$cmd build -h | grep usage:`
	targets=$usage[$usage[(Ie)--target]+10,-2]

	arguments=(
		'(-h --help)'{-h,--help}'[show help message and exit]'
		"--target=[target device that you wish to build the bootloader for]:target:(${(s/,/)targets})"
	)
	_arguments -s : $arguments
}

_dragonBoot_command() {
	local -a commands=(
		'arachne-sim[run the dragonBoot simulation suite]'
		'arachne-formal[run the dragonBoot formal verification suite]'
		'build[build dragonBoot]'
	)
	_values 'dragonBoot commands' : $commands
}

_dragonBoot() {
	local arguments context curcontext=$curcontext state state_descr line
	integer ret=1

	arguments=(
		'(-h --help)'{-h,--help}'[show help message and exit]'
		'(--verbose --debug --quiet)--verbose[verbose mode]'
		'(--verbose --debug --quiet)--debug[debug mode]'
		'(--verbose --debug --quiet)--quiet[quiet mode]'
		'--disable-color[disable output colouring]'
		'(-): :->command'
		'(-)*:: :->arguments'
	)

	_arguments -s -C : $arguments && return

	case $state in
		(command)
			_dragonBoot_command && ret=0
			;;
		(arguments)
			if [ $words[1] = 'build' ]; then
				curcontext=${curcontext%:*:*}:dragonBoot-build:
				_dragonBoot_build && ret=0
			fi
			;;
	esac

	return $ret
}

_dragonBoot
